import time
import sqlite3
import warnings

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, Update, ReplyKeyboardRemove
from telegram.ext import Updater, CallbackQueryHandler, CommandHandler, MessageHandler, ConversationHandler, CallbackContext, Filters
from quizz import bolshoi_history_question, bolshoi_building_question
from location import check_location_mxat, location
from text import bolshoi_history_text, bolshoi_building_text, bolshoi_history2_text, rules

import os
from dotenv import load_dotenv
load_dotenv()

TOKEN = os.getenv('TOKEN')

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect('scores.db', check_same_thread=False)
c = conn.cursor()

c.execute('''CREATE TABLE IF NOT EXISTS scores
             (user_id INTEGER PRIMARY KEY, history_score FLOAT, building_score FLOAT)''')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è history_score –ø–æ user_id
def get_history_score(user_id):
    c.execute("SELECT history_score FROM scores WHERE user_id = ?", (user_id,))
    result = c.fetchone()
    if result:
        return result[0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ history_score
    else:
        return None  # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–∏ —Å —Ç–∞–∫–∏–º user_id, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None


def get_building_score(user_id):
    c.execute("SELECT building_score FROM scores WHERE user_id = ?", (user_id,))
    result = c.fetchone()
    if result:
        return result[0]
    else:
        return None  


main_menu_closed = ReplyKeyboardMarkup([['–ò—Å—Ç–æ—Ä–∏—è üìú'], ['–ó–¥–∞–Ω–∏–µ üèõÔ∏è'], ['–ü–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—å—à–µ üîí']], resize_keyboard=True)
main_menu_open = ReplyKeyboardMarkup([['–ò—Å—Ç–æ—Ä–∏—è üìú'], ['–ó–¥–∞–Ω–∏–µ üèõÔ∏è'], ['–ü–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—å—à–µ üîë']], resize_keyboard=True)


def wake_up(update, context):
    """–§—É–Ω–∫—Ü–∏—è, –∑–∞–ø—É—Å–∫–∞—é—â–∞—è –±–æ—Ç–∞"""
    user_id = update.effective_chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ —Å–æ–∑–¥–∞–µ–º –µ–µ —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º 0
    c.execute("INSERT OR IGNORE INTO scores (user_id, history_score, building_score) VALUES (?, 0, 0)", (user_id,))
    conn.commit()   

    chat = update.effective_chat
    name = update.message.chat.first_name
    button = ReplyKeyboardMarkup([['–ü—Ä–∞–≤–∏–ª–∞ üìö'], ['–ù–∞—á–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ üé≠']], resize_keyboard=True)

    context.bot.send_message(
        chat_id=chat.id,
        text='–ü—Ä–∏–≤–µ—Ç, {}. –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ —Ç–µ–∞—Ç—Ä–∞–º! \n–í—ã–±–µ—Ä–∏, –ø—Ä–æ —á—Ç–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ üëá'.format(name),
        reply_markup=button
    )
    return 'INTRO'

def intro(update, context):
    if str(update.message.text) == '–ù–∞—á–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ üé≠':
        update.message.reply_text(text='–í–ø–µ—Ä–µ–¥!', reply_markup=main_menu_closed)
        return 'MAIN_MENU'
    elif str(update.message.text) == '–ü—Ä–∞–≤–∏–ª–∞ üìö':
        update.message.reply_text(text=rules)

unit_menu_quizz = ReplyKeyboardMarkup([['–ó–∞–≥–∞–¥–∫–∞'], ['–ù–∞–∑–∞–¥']], resize_keyboard=True)
unit_menu_wo_quizz = ReplyKeyboardMarkup([['–ù–∞–∑–∞–¥']], resize_keyboard=True)

def score(user_id):
    if get_building_score(user_id) == 1.0:
        building_score='–ó–∞–≥–∞–¥–∫–∞ –Ω–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏: ‚úÖ'
    else: building_score='–ó–∞–≥–∞–¥–∫–∞ –Ω–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏: ‚ùå'
    if get_history_score(user_id) == 1.0:
        history_score='–ó–∞–≥–∞–¥–∫–∞ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—é: ‚úÖ'
    else: history_score='–ó–∞–≥–∞–¥–∫–∞ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—é: ‚ùå' 
    return f'{history_score} \n{building_score}'  


def main_menu(update, context):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É—Ä–æ–≤–Ω—è"""
    user_id = update.effective_chat.id

    if get_building_score(user_id) == 1.0 and get_history_score(user_id) == 1.0:
        main_menu = main_menu_open
    else: 
        main_menu = main_menu_closed

    if str(update.message.text) == '–ò—Å—Ç–æ—Ä–∏—è üìú':
        if get_history_score(user_id) < 1.0:
            history_menu = unit_menu_quizz
        else: 
            history_menu = unit_menu_wo_quizz
        update.message.reply_text(text='–£–∑–Ω–∞–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–æ –∏—Å—Ç–æ—Ä–∏—é!', reply_markup=history_menu)
        time.sleep(1)
        update.message.reply_text(text=f'{bolshoi_history_text}')
        time.sleep(3)
        update.message.reply_text(
            text=f'{bolshoi_history2_text}', 
            reply_markup= InlineKeyboardMarkup([[InlineKeyboardButton(text='–ß–∏—Ç–∞—Ç—å –±–æ–ª—å—à–µ', url="https://bolshoi.ru/")]]),
            parse_mode='HTML')
        return 'BOLSHOI_HISTORY'

    elif str(update.message.text) == '–ó–¥–∞–Ω–∏–µ üèõÔ∏è':
        if get_building_score(user_id) < 1.0:
            building_menu = unit_menu_quizz
        else:
            building_menu = unit_menu_wo_quizz
        update.message.reply_text(text='–£–∑–Ω–∞–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–æ –∑–¥–∞–Ω–∏–µ!', reply_markup=building_menu)
        update.message.reply_text(
            text=f'{bolshoi_building_text}', 
            reply_markup= InlineKeyboardMarkup([[InlineKeyboardButton(text='–ß–∏—Ç–∞—Ç—å –±–æ–ª—å—à–µ', url="https://bolshoi.ru/")]]),
            parse_mode='HTML')
        update.message.reply_photo(
            photo='https://oknadom.ru/wp-content/uploads/2020/12/p_1.jpg')
        return 'BOLSHOI_BUILDING'
        
    elif str(update.message.text) == '–ü–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—å—à–µ üîí' or str(update.message.text) == '–ü–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—å—à–µ üîë':
        forward_menu = ReplyKeyboardMarkup([['–í–ø–µ—Ä–µ–¥!']], resize_keyboard=True, one_time_keyboard=True)
        if get_building_score(user_id) < 1.0 or get_history_score(user_id) < 1.0:
            user_score = score(user_id)
            update.message.reply_text(text=f'–¢—ã —Ä–µ—à–∏–ª –Ω–µ –≤—Å–µ –∑–∞–≥–∞–¥–∫–∏! \n\n{user_score}')
        elif get_building_score(user_id) == 1.0 and get_history_score(user_id) == 1.0:
            update.message.reply_text(text='–û—Ç–ª–∏—á–Ω–æ! –ò–¥–µ–º –¥–∞–ª—å—à–µ', reply_markup=forward_menu)
            return 'LEVEL_END'

    # elif str(update.message.text) == '–£–∑–Ω–∞—Ç—å —Å—á–µ—Ç':
    #     if get_building_score(user_id) == 1.0:
    #         building_score='–ó–∞–≥–∞–¥–∫–∞ –Ω–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏: ‚úÖ'
    #     else: building_score='–ó–∞–≥–∞–¥–∫–∞ –Ω–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏: ‚ùå'
    #     if get_history_score(user_id) == 1.0:
    #         history_score='–ó–∞–≥–∞–¥–∫–∞ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—é: ‚úÖ'
    #     else: history_score='–ó–∞–≥–∞–¥–∫–∞ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—é: ‚ùå'   
    #     update.message.reply_text(text=f'–î–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º, —Å–∫–æ–ª—å–∫–æ –∑–∞–≥–∞–¥–æ–∫ —Ç—ã —Ä–µ—à–∏–ª! \n\n{history_score} \n{building_score}', 
    #                               reply_markup=main_menu)

    else: update.message.reply_text(text=f'–ü—Ä–æ—Å—Ç–∏, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª ü•∫')


quizz_menu = [[
                  InlineKeyboardButton("–ü–æ–¥—Å–∫–∞–∑–∫–∞", callback_data='hint'),
                  InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data='answer')]]


def bolshoi_history(update, context):
    """–ë–ª–æ–∫ –∏—Å—Ç–æ—Ä–∏–∏ –ë–æ–ª—å—à–æ–≥–æ —Ç–µ–∞—Ç—Ä–∞"""
    user_id = update.effective_chat.id

    if str(update.message.text) == '–ó–∞–≥–∞–¥–∫–∞' and get_history_score(user_id) < 1.0:
        reply_markup = InlineKeyboardMarkup(quizz_menu)
        update.message.reply_text(
            text=f"–≠—Ç–æ –∑–∞–≥–∞–¥–∫–∞ –Ω–∞ –∑–Ω–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –±–æ–ª—å—à–æ–≥–æ —Ç–µ–∞—Ç—Ä–∞? \n–ü–∏—à–∏ –æ—Ç–≤–µ—Ç –≤–Ω–∏–∑—É üëá",
            reply_markup=reply_markup)
        return 'HISTORY_QUIZZ'
    elif str(update.message.text) == '–ù–∞–∑–∞–¥':
        if get_building_score(user_id) == 1.0 and get_history_score(user_id) == 1.0:
            main_menu = main_menu_open
        else: main_menu = main_menu_closed
        update.message.reply_text(text='–í—ã–±–µ—Ä–∏, –ø—Ä–æ —á—Ç–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å!', reply_markup=main_menu)
        return 'MAIN_MENU'
    else: update.message.reply_text(text=f'–ü—Ä–æ—Å—Ç–∏, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª ü•∫')


def bolshoi_building(update, context):
    """–ë–ª–æ–∫ –∑–¥–∞–Ω–∏—è –ë–æ–ª—å—à–æ–≥–æ —Ç–µ–∞—Ç—Ä–∞"""
    user_id = update.effective_chat.id

    if str(update.message.text) == '–ó–∞–≥–∞–¥–∫–∞' and get_building_score(user_id) < 1.0:
        reply_markup = InlineKeyboardMarkup(quizz_menu)
        update.message.reply_text(
            text=f"–≠—Ç–æ –∑–∞–≥–∞–¥–∫–∞ –Ω–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏ –±–æ–ª—å—à–æ–≥–æ —Ç–µ–∞—Ç—Ä–∞? \n–ü–∏—à–∏ –æ—Ç–≤–µ—Ç –≤–Ω–∏–∑—É üëá",
            reply_markup=reply_markup)
        return 'BUILDING_QUIZZ'
    elif str(update.message.text) == '–ù–∞–∑–∞–¥':
        if get_building_score(user_id) == 1.0 and get_history_score(user_id) == 1.0:
            main_menu = main_menu_open
        else: main_menu = main_menu_closed
        update.message.reply_text(text='–í—ã–±–µ—Ä–∏, –ø—Ä–æ —á—Ç–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å!', reply_markup=main_menu)
        return 'MAIN_MENU'
    else: update.message.reply_text(text=f'–ü—Ä–æ—Å—Ç–∏, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª ü•∫')


def bolshoi_history_quizz(update, context):
    """–í–æ–ø—Ä–æ—Å –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –ë–æ–ª—å—à–æ–≥–æ —Ç–µ–∞—Ç—Ä–∞"""
    user_id = update.effective_chat.id

    text = str(update.message.text).lower()
    if text == '–Ω–∞–∑–∞–¥':
        if get_building_score(user_id) == 1.0 and get_history_score(user_id) == 1.0:
            main_menu = main_menu_open
        else: main_menu = main_menu_closed
        update.message.reply_text(text='–í—ã–±–µ—Ä–∏, –ø—Ä–æ —á—Ç–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å!', reply_markup=main_menu)
        return 'MAIN_MENU'
    response = bolshoi_history_question(text)
    if response == '–ú–æ–ª–æ–¥–µ—Ü! –≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç üèÖ':
        c.execute("UPDATE scores SET history_score = history_score + 1.0 WHERE user_id = ?", (user_id,))
        conn.commit()
        c.execute("SELECT history_score FROM scores WHERE user_id = ?", (user_id,))
        update.message.reply_text(text=response, reply_markup=unit_menu_wo_quizz)
        return 'BOLSHOI_HISTORY'
    update.message.reply_text(response)


def history_quizz_menu_callback(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π"""
    query = update.callback_query
    query.answer()
    if query.data == 'hint':
        reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data='answer')]])
        query.edit_message_text(
            text=f"–≠—Ç–æ –∑–∞–≥–∞–¥–∫–∞ –Ω–∞ –∑–Ω–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –±–æ–ª—å—à–æ–≥–æ —Ç–µ–∞—Ç—Ä–∞? \n–ü–∏—à–∏ –æ—Ç–≤–µ—Ç –≤–Ω–∏–∑—É üëá",
            reply_markup=reply_markup)
        query.message.reply_text(
            text='–ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –ë–æ–ª—å—à–æ–≥–æ —Ç–µ–∞—Ç—Ä–∞', parse_mode='HTML')    
    elif query.data == 'answer':
        query.edit_message_text(
            text=f"–≠—Ç–æ –∑–∞–≥–∞–¥–∫–∞ –Ω–∞ –∑–Ω–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –±–æ–ª—å—à–æ–≥–æ —Ç–µ–∞—Ç—Ä–∞? \n–ü–∏—à–∏ –æ—Ç–≤–µ—Ç –≤–Ω–∏–∑—É üëá")
        query.message.reply_text(
            text=f'<tg-spoiler>–û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–≥–∞–¥–∫—É –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –ë–æ–ª—å—à–æ–≥–æ —Ç–µ–∞—Ç—Ä–∞—É</tg-spoiler>', parse_mode='HTML')


def bolshoi_building_quizz(update, context):
    """–í–æ–ø—Ä–æ—Å –ø—Ä–æ –∑–¥–∞–Ω–∏–µ –ë–æ–ª—å—à–æ–≥–æ —Ç–µ–∞—Ç—Ä–∞"""
    user_id = update.effective_chat.id
    text = str(update.message.text).lower()
    if text == '–Ω–∞–∑–∞–¥':
        if get_building_score(user_id) == 1.0 and get_history_score(user_id) == 1.0:
            main_menu = main_menu_open
        else: main_menu = main_menu_closed
        update.message.reply_text(text='–í—ã–±–µ—Ä–∏, –ø—Ä–æ —á—Ç–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å!', reply_markup=main_menu)
        return 'MAIN_MENU'
    response = bolshoi_building_question(text)
    if response == '–ú–æ–ª–æ–¥–µ—Ü! –≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç üèÖ':
        c.execute("UPDATE scores SET building_score = building_score + 1.0 WHERE user_id = ?", (user_id,))
        conn.commit()
        c.execute("SELECT building_score FROM scores WHERE user_id = ?", (user_id,))
        update.message.reply_text(response, reply_markup=unit_menu_wo_quizz)
        return 'BOLSHOI_BUILDING'
    update.message.reply_text(response)


def building_quizz_menu_callback(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π"""
    query = update.callback_query
    query.answer()
    if query.data == 'hint':
        reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data='answer')]])
        query.edit_message_text(
            text=f"–≠—Ç–æ –∑–∞–≥–∞–¥–∫–∞ –Ω–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏ –±–æ–ª—å—à–æ–≥–æ —Ç–µ–∞—Ç—Ä–∞? \n–ü–∏—à–∏ –æ—Ç–≤–µ—Ç –≤–Ω–∏–∑—É üëá",
            reply_markup=reply_markup)
        query.message.reply_text(
            text='–ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ –∑–¥–∞–Ω–∏—é –ë–æ–ª—å—à–æ–≥–æ —Ç–µ–∞—Ç—Ä–∞', parse_mode='HTML')    
    elif query.data == 'answer':
        query.edit_message_text(
            text=f"–≠—Ç–æ –∑–∞–≥–∞–¥–∫–∞ –Ω–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏ –±–æ–ª—å—à–æ–≥–æ —Ç–µ–∞—Ç—Ä–∞? \n–ü–∏—à–∏ –æ—Ç–≤–µ—Ç –≤–Ω–∏–∑—É üëá")
        query.message.reply_text(
            text=f'<tg-spoiler>–û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–≥–∞–¥–∫—É –Ω–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏ –ë–æ–ª—å—à–æ–≥–æ —Ç–µ–∞—Ç—Ä–∞—É</tg-spoiler>', parse_mode='HTML')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
def location_callback(update: Update, context: CallbackContext) -> None:
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    check_location_mxat(update, context)
    # –°–Ω–∏–º–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    return ConversationHandler.END


def level_end(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π"""
    reply_markup = InlineKeyboardMarkup(quizz_menu)
    if str(update.message.text) == '–í–ø–µ—Ä–µ–¥!':
        update.message.reply_text(
            text=f'–ú–æ–ª–æ–¥–µ—Ü, —Ç—ã –ø–µ—Ä–µ—à–µ–ª –Ω–∞ –≤—Ç–æ—Ä–æ–π —É—Ä–æ–≤–µ–Ω—å! \n\n–°–ª–µ–¥—É—é—â–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ –Ω–∞—à–µ–º '
                f'–º–∞—Ä—à—Ä—É—Ç–µ ‚Äì —Ç–µ–∞—Ç—Ä, –Ω–µ–ø–æ–¥–∞–ª–µ–∫—É –æ—Ç—Å—é–¥–∞. –í–æ—Ç, –∫—Å—Ç–∞—Ç–∏, –µ–≥–æ —Å–∏–º–≤–æ–ª üëá')
        update.message.reply_photo(
            photo='https://www.culture.ru/s/vopros/chayka-mhat/images/tild3462-6532-4261-a536-616335303237__2.png')
        time.sleep(3)
        update.message.reply_text(
            text=f'–î–æ–≥–∞–¥–∞–ª—Å—è, –æ –∫–∞–∫–æ–º —Ç–µ–∞—Ç—Ä–µ –∏–¥–µ—Ç —Ä–µ—á—å? ü§î \n–û—Ç–ø—Ä–∞–≤—å –µ–≥–æ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–µ–º!',
            reply_markup=reply_markup)
        location_callback(Update, CallbackContext)
        check_location_mxat(Update, CallbackContext)
        return "LOCATION"
    else: update.message.reply_text(text=f'–ü—Ä–æ—Å—Ç–∏, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª ü•∫')

def location_quizz_menu_callback(update, context):
    query = update.callback_query
    query.answer()
    if query.data == 'hint':
        reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data='answer')]])
        query.edit_message_text(
            text=f'–î–æ–≥–∞–¥–∞–ª—Å—è, –æ –∫–∞–∫–æ–º —Ç–µ–∞—Ç—Ä–µ –∏–¥–µ—Ç —Ä–µ—á—å? ü§î \n–û—Ç–ø—Ä–∞–≤—å –µ–≥–æ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–µ–º!',
            reply_markup=reply_markup)
        query.message.reply_text(
            text='–ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ –ª–æ–∫–∞—Ü–∏–∏ –ú–•–¢', parse_mode='HTML')    
    elif query.data == 'answer':
        query.edit_message_text(
            text=f'–î–æ–≥–∞–¥–∞–ª—Å—è, –æ –∫–∞–∫–æ–º —Ç–µ–∞—Ç—Ä–µ –∏–¥–µ—Ç —Ä–µ—á—å? ü§î \n–û—Ç–ø—Ä–∞–≤—å –µ–≥–æ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–µ–º!')
        query.message.reply_text(
            text=f'<tg-spoiler>–û—Ç–≤–µ—Ç: –ú–•–¢ –∏–º. –ß–µ—Ö–æ–≤–∞</tg-spoiler>', parse_mode='HTML')

def cancel(update, context):
    user_id = update.effective_chat.id
    c.execute('''DELETE FROM scores
                 WHERE user_id = ?''', (user_id,))
    update.message.reply_text(text='–î–æ –≤—Å—Ç—Ä–µ—á–∏!', reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END


def main():
    """–°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞"""
    updater = Updater(TOKEN, use_context=True)
    dispatcher = updater.dispatcher

    conversation = ConversationHandler(
        entry_points=[CommandHandler('start', wake_up)],
        states={
            'INTRO': [MessageHandler(Filters.regex('^(–ü—Ä–∞–≤–∏–ª–∞ üìö|–ù–∞—á–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ üé≠)$'), intro)],
            'MAIN_MENU': [MessageHandler(Filters.text & ~Filters.command, main_menu)],
            'BOLSHOI_HISTORY': [MessageHandler(Filters.text & ~Filters.command, bolshoi_history)],
            'BOLSHOI_BUILDING': [MessageHandler(Filters.text & ~Filters.command, bolshoi_building)],
            'HISTORY_QUIZZ': [
                        CallbackQueryHandler(history_quizz_menu_callback, pattern='^(hint|answer)$'),
                        MessageHandler(Filters.text & ~Filters.command, bolshoi_history_quizz)],
            'BUILDING_QUIZZ': [
                        CallbackQueryHandler(building_quizz_menu_callback, pattern='^(hint|answer)$'),
                        MessageHandler(Filters.text & ~Filters.command, bolshoi_building_quizz)],
            'LEVEL_END': [
                        CallbackQueryHandler(location_quizz_menu_callback, pattern='^(hint|answer)$'),
                        MessageHandler(Filters.text & ~Filters.command, level_end),]
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        per_chat=True,
        # per_message=True,
    )

    location_handler = MessageHandler(Filters.location, location)
    dispatcher.add_handler(ConversationHandler(
        entry_points=[location_handler],
        states={"LOCATION": [location_handler]},
        fallbacks=[]
    ))

    dispatcher.add_handler(conversation)

    updater.start_polling()
    updater.idle()

with warnings.catch_warnings():
    warnings.simplefilter("ignore")
    main()

if __name__ == '__main__':
    main()
