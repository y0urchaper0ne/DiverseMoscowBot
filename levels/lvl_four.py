import time

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from quizz import lenkom_building_question, lenkom_history_question, lenkom_to_electro_question
from location import check_location_lenkom
from texts.text_four import *
from levels.lvl_one import (main_menu_closed, main_menu_open, 
                            unit_menu_quizz, unit_menu_wo_quizz,
                            quizz_menu,)
from files_manager import (get_building_score, get_history_score,
                           increment_level_count, increment_building_score,
                           increment_history_score)


def lenkom_score(user_id):
    if get_building_score(user_id) == 4.0:
        building_score='–ó–∞–≥–∞–¥–∫–∞ –Ω–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏: ‚úÖ'
    else: building_score='–ó–∞–≥–∞–¥–∫–∞ –Ω–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏: ‚ùå'
    if get_history_score(user_id) == 4.0:
        history_score='–ó–∞–≥–∞–¥–∫–∞ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—é: ‚úÖ'
    else: history_score='–ó–∞–≥–∞–¥–∫–∞ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—é: ‚ùå' 
    return f'{history_score} \n{building_score}' 


def lenkom_transition(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    user_id = update.effective_chat.id
    response = check_location_lenkom(update, context)
    if response:
        increment_level_count(user_id)
        update.message.reply_text(
            text='–ü—Ä–æ —á—Ç–æ —É–∑–Ω–∞–µ–º —Å–ø–µ—Ä–≤–∞?', 
            reply_markup=main_menu_closed)
        return 'LENKOM_MAIN_MENU'
    update.message.reply_text(text='–ü–æ—Ö–æ–∂–µ, –≤—ã –µ—â–µ –Ω–µ –¥–æ—à–ª–∏ –¥–æ —Ç–µ–∞—Ç—Ä–∞')


def lenkom_main_menu(update, context):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É—Ä–æ–≤–Ω—è"""
    user_id = update.effective_chat.id

    if str(update.message.text) == '–ò—Å—Ç–æ—Ä–∏—è üìú':
        if get_history_score(user_id) < 4.0:
            history_menu = unit_menu_quizz
        else: 
            history_menu = unit_menu_wo_quizz
        update.message.reply_text(text='–£–∑–Ω–∞–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–æ –∏—Å—Ç–æ—Ä–∏—é!', reply_markup=history_menu)
        time.sleep(1)
        update.message.reply_text(
            text=f'{lenkom_history_text}', 
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(text='–ò—Å—Ç–æ—Ä–∏—è –õ–µ–Ω–∫–æ–º–∞', url=lenkom_history_url)]]),
            )
        return 'LENKOM_HISTORY'

    elif str(update.message.text) == '–ó–¥–∞–Ω–∏–µ üèõÔ∏è':
        if get_building_score(user_id) < 4.0:
            building_menu = unit_menu_quizz
        else:
            building_menu = unit_menu_wo_quizz
        update.message.reply_text(text='–£–∑–Ω–∞–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–æ –∑–¥–∞–Ω–∏–µ!', reply_markup=building_menu)
        update.message.reply_text(
            text=f'{lenkom_building_text}', 
            reply_markup= InlineKeyboardMarkup([[InlineKeyboardButton(text='–ó–¥–∞–Ω–∏–µ –õ–µ–Ω–∫–æ–º–∞', url=lenkom_building_url)]]),
            )
        return 'LENKOM_BUILDING'
      
    elif str(update.message.text) == '–ü–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—å—à–µ üîí' or str(update.message.text) == '–ü–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—å—à–µ üîë':
        forward_menu = ReplyKeyboardMarkup([['–í–ø–µ—Ä–µ–¥!']], resize_keyboard=True, one_time_keyboard=True)
        if get_building_score(user_id) < 4.0 or get_history_score(user_id) < 4.0:
            user_score = lenkom_score(user_id)
            update.message.reply_text(text=f'–í—ã —Ä–µ—à–∏–ª–∏ –Ω–µ –≤—Å–µ –∑–∞–≥–∞–¥–∫–∏! \n\n{user_score}')
        elif get_building_score(user_id) >= 4.0 and get_history_score(user_id) >= 4.0:
            update.message.reply_text(
                text=f'–í—Ä–µ–º—è —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ –ª–µ—Ç–∏—Ç! –û–≥–ª—è–Ω—É—Ç—å—Å—è –Ω–µ —É—Å–ø–µ–ª–∏, –∫–∞–∫ –≤—ã —É–∂–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º, –ø—è—Ç–æ–º —É—Ä–æ–≤–Ω–µ ü•≥ \n\n'
                     f'–û—Å—Ç–∞–ª–∞—Å—å –ø–æ—Å–ª–µ–¥–Ω—è—è —Ç–æ—á–∫–∞ –≤ –Ω–∞—à–µ–º –º–∞—Ä—à—Ä—É—Ç–µ.', 
                reply_markup=forward_menu)
            return 'LEVEL_FOUR_END'

    else: update.message.reply_text(text=f'–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª ü•∫')


def lenkom_history(update, context):
    """–ë–ª–æ–∫ –∏—Å—Ç–æ—Ä–∏–∏ –õ–µ–Ω–∫–æ–º–∞"""
    user_id = update.effective_chat.id

    if str(update.message.text) == '–ó–∞–≥–∞–¥–∫–∞' and get_history_score(user_id) < 4.0:
        reply_markup = InlineKeyboardMarkup(quizz_menu)
        update.message.reply_photo(
            photo="https://ic.wampi.ru/2023/06/08/lenkom_history.png",
            caption = '–ê—Ñ–∏—à—É –∫–∞–∫–æ–≥–æ —Å–ø–µ–∫—Ç–∞–∫–ª—è –≤—ã –≤–∏–¥–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ? –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏!',
            reply_markup=reply_markup)
        return 'LENKOM_HISTORY_QUIZZ'
    elif str(update.message.text) == '–ù–∞–∑–∞–¥':
        if get_building_score(user_id) == 4.0 and get_history_score(user_id) == 4.0:
            main_menu = main_menu_open
        else: main_menu = main_menu_closed
        update.message.reply_text(text='–í—ã–±–µ—Ä–∏—Ç–µ, –ø—Ä–æ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å!', reply_markup=main_menu)
        return 'LENKOM_MAIN_MENU'
    else: update.message.reply_text(text=f'–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª ü•∫')


def lenkom_building(update, context):
    """–ë–ª–æ–∫ –∑–¥–∞–Ω–∏—è –õ–µ–Ω–∫–æ–º–∞"""
    user_id = update.effective_chat.id

    if str(update.message.text) == '–ó–∞–≥–∞–¥–∫–∞' and get_building_score(user_id) < 4.0:
        reply_markup = InlineKeyboardMarkup(quizz_menu)
        update.message.reply_photo(
            photo="https://ie.wampi.ru/2023/06/08/lenkom_building.png",
            caption = '–ü–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤–Ω–∏–∑—É üëá',
            reply_markup=reply_markup)
        return 'LENKOM_BUILDING_QUIZZ'
    elif str(update.message.text) == '–ù–∞–∑–∞–¥':
        if get_building_score(user_id) == 4.0 and get_history_score(user_id) == 4.0:
            main_menu = main_menu_open
        else: main_menu = main_menu_closed
        update.message.reply_text(text='–í—ã–±–µ—Ä–∏—Ç–µ, –ø—Ä–æ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å!', reply_markup=main_menu)
        return 'LENKOM_MAIN_MENU'
    else: update.message.reply_text(text=f'–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª ü•∫')


def lenkom_history_quizz(update, context):
    """–í–æ–ø—Ä–æ—Å –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –õ–µ–Ω–∫–æ–º–∞"""
    user_id = update.effective_chat.id
    message_id = update.message.message_id

    text = str(update.message.text).lower()
    if text == '–Ω–∞–∑–∞–¥':
        if get_building_score(user_id) == 4.0 and get_history_score(user_id) == 4.0:
            main_menu = main_menu_open
        else: main_menu = main_menu_closed
        update.message.reply_text(text='–í—ã–±–µ—Ä–∏—Ç–µ, –ø—Ä–æ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å!', reply_markup=main_menu)
        return 'LENKOM_MAIN_MENU'
    response = lenkom_history_question(text)

    if response == 'Parfait! –í—Å–µ —Ç–∞–∫ ü•≥':
        update.message.reply_photo(
            photo="https://im.wampi.ru/2023/06/08/lenkom_history-2.png",
            caption=response,
            reply_markup=unit_menu_wo_quizz
        )
        increment_history_score(user_id)
        return 'LENKOM_HISTORY'
    update.message.reply_text(response)


def lenkom_history_quizz_menu_callback(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π"""
    query = update.callback_query
    query.answer()
    if query.data == 'hint':
        reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data='answer')]])
        query.edit_message_reply_markup(reply_markup=reply_markup)
        query.message.reply_text(
            text='üí° –†–µ–∂–∏—Å—Å–µ—Ä –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ ‚Äî –ê. –≠—Ñ—Ä–æ—Å, –∞ —Å–∞–º —Å–ø–µ–∫—Ç–∞–∫–ª—å —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –≤ —Å—Ç–∞—Ç—å–µ', parse_mode='HTML')    
    elif query.data == 'answer':
        query.edit_message_reply_markup()
        query.message.reply_text(
            text=f'–û—Ç–≤–µ—Ç: <tg-spoiler>–í –¥–µ–Ω—å —Å–≤–∞–¥—å–±—ã</tg-spoiler>', parse_mode='HTML')


def lenkom_building_quizz(update, context):
    """–í–æ–ø—Ä–æ—Å –ø—Ä–æ –∑–¥–∞–Ω–∏–µ –õ–µ–Ω–∫–æ–º–∞"""
    user_id = update.effective_chat.id
    text = str(update.message.text).lower()
    if text == '–Ω–∞–∑–∞–¥':
        if get_building_score(user_id) == 4.0 and get_history_score(user_id) == 4.0:
            main_menu = main_menu_open
        else: main_menu = main_menu_closed
        update.message.reply_text(text='–í—ã–±–µ—Ä–∏—Ç–µ, –ø—Ä–æ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å!', reply_markup=main_menu)
        return 'LENKOM_MAIN_MENU'
    response = lenkom_building_question(text)
    if response == 'Magnifique! –í—ã –æ—á–µ–Ω—å –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å–Ω—ã':
        increment_building_score(user_id)
        update.message.reply_text(text=response, reply_markup=unit_menu_wo_quizz)
        return 'LENKOM_BUILDING'
    update.message.reply_text(response)


def lenkom_building_quizz_menu_callback(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π"""
    query = update.callback_query
    query.answer()
    if query.data == 'hint':
        reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data='answer')]])
        query.edit_message_reply_markup(reply_markup=reply_markup)
        query.message.reply_text(
            text='üí° –û–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ñ–∞—Å–∞–¥–µ –∑–¥–∞–Ω–∏—è –ø–æ –∞–¥—Ä–µ—Å—É –ù–∞—Å—Ç–∞—Å—å–∏–Ω—Å–∫–∏–π –ø–µ—Ä. 5—Å1', parse_mode='HTML')    
    elif query.data == 'answer':
        query.edit_message_reply_markup()
        query.message.reply_text(
            text=f'–û—Ç–≤–µ—Ç: <tg-spoiler>–ú–∞—Ä–∫ –ó–∞—Ö–∞—Ä–æ–≤</tg-spoiler>', parse_mode='HTML')


def level_four_end(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å"""
    reply_markup = InlineKeyboardMarkup(quizz_menu)
    if str(update.message.text) == '–í–ø–µ—Ä–µ–¥!':
        update.message.reply_photo(
            photo='https://ie.wampi.ru/2023/06/08/elecro_transition.png')
        time.sleep(2)
        update.message.reply_text(
            text=f'–î–æ–≥–∞–¥–∞–ª–∏—Å—å, –æ –∫–∞–∫–æ–º —Ç–µ–∞—Ç—Ä–µ —Ä–µ—á—å? ü§î \n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏!',
            reply_markup=reply_markup)
        return "LENKOM_TO_LENKOM_TRANSITION"
    else: update.message.reply_text(text=f'–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª ü•∫')


def lenkom_to_electro(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥–∞–¥–∫–∏ —Å –õ–µ–Ω–∫–æ–º–æ–º"""
    button = ReplyKeyboardMarkup([[KeyboardButton(text='–ù–∞ –º–µ—Å—Ç–µ!', request_location=True)]], resize_keyboard=True, one_time_keyboard=True)    
    text = str(update.message.text).lower()
    response = lenkom_to_electro_question(text)
    if response == 'G√©nial! –ù–∞—à–∞ —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ ‚Äî –≠–ª–µ–∫—Ç—Ä–æ—Ç–µ–∞—Ç—Ä –°—Ç–∞–Ω–∏—Å–ª–∞–≤—Å–∫–∏–π!':
        update.message.reply_text(response)
        time.sleep(2)
        update.message.reply_text(
            text=electro_transition_text,
            reply_markup=button)
        return 'LENKOM_LOCATION'
    update.message.reply_text(response)


def lenkom_location_quizz_menu_callback(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π –ª–æ–∫–∞—Ü–∏–∏"""
    query = update.callback_query
    query.answer()
    if query.data == 'hint':
        reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data='answer')]])
        query.edit_message_text(
            text=f'–î–æ–≥–∞–¥–∞–ª–∏—Å—å, –æ –∫–∞–∫–æ–º —Ç–µ–∞—Ç—Ä–µ —Ä–µ—á—å? ü§î \n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏!',
            reply_markup=reply_markup)
        query.message.reply_text(
            text=f'üí° –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∞—Ç—Ä–∞ —Å–æ–∑–≤—É—á–Ω–æ —Å–æ —Å–ª–æ–≤–æ–º, –∫–æ—Ç–æ—Ä—ã–º –Ω–∞–∑—ã–≤–∞–ª–∏ –ø–µ—Ä–≤—ã–µ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä—ã –≤ –†–æ—Å—Å–∏–∏', parse_mode='HTML')    
    elif query.data == 'answer':
        query.edit_message_text(
            text=f'–î–æ–≥–∞–¥–∞–ª–∏—Å—å, –æ –∫–∞–∫–æ–º —Ç–µ–∞—Ç—Ä–µ —Ä–µ—á—å? ü§î \n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏!')
        query.message.reply_text(
            text=f'–û—Ç–≤–µ—Ç: <tg-spoiler>–≠–ª–µ–∫—Ç—Ä–æ—Ç–µ–∞—Ç—Ä</tg-spoiler>', parse_mode='HTML')
