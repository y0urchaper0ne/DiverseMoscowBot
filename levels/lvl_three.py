import time

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from quizz import nations_building_question, nations_history_question, nations_to_lenkom_question
from location import check_location_nations
from texts.text_three import *
from levels.lvl_one import (main_menu_closed, main_menu_open, 
                            unit_menu_quizz, unit_menu_wo_quizz,
                            quizz_menu,)
from files_manager import (get_building_score, get_history_score,
                           increment_level_count, increment_building_score,
                           increment_history_score)


def nations_score(user_id):
    if get_building_score(user_id) == 3.0:
        building_score='–ó–∞–≥–∞–¥–∫–∞ –Ω–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏: ‚úÖ'
    else: building_score='–ó–∞–≥–∞–¥–∫–∞ –Ω–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏: ‚ùå'
    if get_history_score(user_id) == 3.0:
        history_score='–ó–∞–≥–∞–¥–∫–∞ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—é: ‚úÖ'
    else: history_score='–ó–∞–≥–∞–¥–∫–∞ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—é: ‚ùå' 
    return f'{history_score} \n{building_score}' 


def nations_transition(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    user_id = update.effective_chat.id
    response = check_location_nations(update, context)
    if response:
        increment_level_count(user_id)
        update.message.reply_text(
            text='C —á–µ–≥–æ –Ω–∞—á–Ω–µ–º –≤ —ç—Ç–æ—Ç —Ä–∞–∑?', 
            reply_markup=main_menu_closed)
        return 'NATIONS_MAIN_MENU'
    update.message.reply_text(text='–ü–æ—Ö–æ–∂–µ, –≤—ã –µ—â–µ –Ω–µ –¥–æ—à–ª–∏ –¥–æ —Ç–µ–∞—Ç—Ä–∞')


def nations_main_menu(update, context):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É—Ä–æ–≤–Ω—è"""
    user_id = update.effective_chat.id

    if str(update.message.text) == '–ò—Å—Ç–æ—Ä–∏—è üìú':
        if get_history_score(user_id) < 3.0:
            history_menu = unit_menu_quizz
        else: 
            history_menu = unit_menu_wo_quizz
        update.message.reply_text(text='–£–∑–Ω–∞–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–æ –∏—Å—Ç–æ—Ä–∏—é!', reply_markup=history_menu)
        time.sleep(1)
        update.message.reply_text(
            text=f'{nations_history_text}', 
            reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton(text='–ò—Å—Ç–æ—Ä–∏—è –¢–µ–∞—Ç—Ä–∞ –ù–∞—Ü–∏–π', url=nations_history_url)]]),
            )
        return 'NATIONS_HISTORY'

    elif str(update.message.text) == '–ó–¥–∞–Ω–∏–µ üèõÔ∏è':
        if get_building_score(user_id) < 3.0:
            building_menu = unit_menu_quizz
        else:
            building_menu = unit_menu_wo_quizz
        update.message.reply_text(text='–£–∑–Ω–∞–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–æ –∑–¥–∞–Ω–∏–µ!', reply_markup=building_menu)
        update.message.reply_text(
            text=f'{nations_building_text}', 
            reply_markup= InlineKeyboardMarkup(
            [[InlineKeyboardButton(text='–ó–¥–∞–Ω–∏–µ –¢–µ–∞—Ç—Ä–∞ –ù–∞—Ü–∏–π', url=nations_building_url)]]),
            )
        return 'NATIONS_BUILDING'
      
    elif str(update.message.text) == '–ü–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—å—à–µ üîí' or str(update.message.text) == '–ü–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—å—à–µ üîë':
        forward_menu = ReplyKeyboardMarkup([['–í–ø–µ—Ä–µ–¥!']], resize_keyboard=True, one_time_keyboard=True)
        if get_building_score(user_id) < 3.0 or get_history_score(user_id) < 3.0:
            user_score = nations_score(user_id)
            update.message.reply_text(text=f'–í—ã —Ä–µ—à–∏–ª–∏ –Ω–µ –≤—Å–µ –∑–∞–≥–∞–¥–∫–∏! \n\n{user_score}')
        elif get_building_score(user_id) >= 3.0 and get_history_score(user_id) >= 3.0:
            update.message.reply_text(
                text=f'–ë–æ–ª—å—à–µ –ø–æ–ª–æ–≤–∏–Ω—ã –Ω–∞—à–µ–≥–æ promenade —É–∂–µ –ø–æ–∑–∞–¥–∏! –í—ã —É–∂–µ –Ω–∞ —á–µ—Ç–≤–µ—Ä—Ç–æ–º —É—Ä–æ–≤–Ω–µ, bravo ü•≥ \n\n' \
                     f'–î–∞–≤–∞–π—Ç–µ –∂–µ —Å–∫–æ—Ä–µ–µ –ø–æ–π–¥–µ–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–æ—á–∫–µ.', 
                reply_markup=forward_menu)
            return 'LEVEL_THREE_END'

    else: update.message.reply_text(text=f'–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª ü•∫')


def nations_history(update, context):
    """–ë–ª–æ–∫ –∏—Å—Ç–æ—Ä–∏–∏ –¢–µ–∞—Ç—Ä–∞ –ù–∞—Ü–∏–π"""
    user_id = update.effective_chat.id

    if str(update.message.text) == '–ó–∞–≥–∞–¥–∫–∞' and get_history_score(user_id) < 3.0:
        reply_markup = InlineKeyboardMarkup(quizz_menu)
        update.message.reply_photo(
            photo="https://ic.wampi.ru/2023/06/08/nations_history.png",
            caption = '–ü–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤–Ω–∏–∑—É üëá',
            reply_markup=reply_markup)
        return 'NATIONS_HISTORY_QUIZZ'
    elif str(update.message.text) == '–ù–∞–∑–∞–¥':
        if get_building_score(user_id) == 3.0 and get_history_score(user_id) == 3.0:
            main_menu = main_menu_open
        else: main_menu = main_menu_closed
        update.message.reply_text(text='–í—ã–±–µ—Ä–∏—Ç–µ, –ø—Ä–æ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å!', reply_markup=main_menu)
        return 'NATIONS_MAIN_MENU'
    else: update.message.reply_text(text=f'–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª ü•∫')


def nations_building(update, context):
    """–ë–ª–æ–∫ –∑–¥–∞–Ω–∏—è –¢–µ–∞—Ç—Ä–∞ –ù–∞—Ü–∏–π"""
    user_id = update.effective_chat.id

    if str(update.message.text) == '–ó–∞–≥–∞–¥–∫–∞' and get_building_score(user_id) < 3.0:
        reply_markup = InlineKeyboardMarkup(quizz_menu)
        update.message.reply_photo(
            photo="https://im.wampi.ru/2023/06/08/nations_building.png",
            caption = '–ü–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤–Ω–∏–∑—É üëá',
            reply_markup=reply_markup)
        return 'NATIONS_BUILDING_QUIZZ'
    elif str(update.message.text) == '–ù–∞–∑–∞–¥':
        if get_building_score(user_id) == 3.0 and get_history_score(user_id) == 3.0:
            main_menu = main_menu_open
        else: main_menu = main_menu_closed
        update.message.reply_text(text='–í—ã–±–µ—Ä–∏—Ç–µ, –ø—Ä–æ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å!', reply_markup=main_menu)
        return 'NATIONS_MAIN_MENU'
    else: update.message.reply_text(text=f'–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª ü•∫')


def nations_history_quizz(update, context):
    """–í–æ–ø—Ä–æ—Å –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –¢–µ–∞—Ç—Ä–∞ –ù–∞—Ü–∏–π"""
    user_id = update.effective_chat.id

    text = str(update.message.text).lower()
    if text == '–Ω–∞–∑–∞–¥':
        if get_building_score(user_id) == 3.0 and get_history_score(user_id) == 3.0:
            main_menu = main_menu_open
        else: main_menu = main_menu_closed
        update.message.reply_text(text='–í—ã–±–µ—Ä–∏—Ç–µ, –ø—Ä–æ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å!', reply_markup=main_menu)
        return 'NATIONS_MAIN_MENU'
    response = nations_history_question(text)
    if response == 'Bravo! –í—Å–µ –≤–µ—Ä–Ω–æ ü•≥':
        increment_history_score(user_id)
        update.message.reply_text(text=response, reply_markup=unit_menu_wo_quizz)
        return 'NATIONS_HISTORY'
    update.message.reply_text(response)


def nations_history_quizz_menu_callback(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π"""
    query = update.callback_query
    query.answer()
    if query.data == 'hint':
        reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data='answer')]])
        query.edit_message_reply_markup(reply_markup=reply_markup)
        query.message.reply_text(
            text='üí° –ò—Ö –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç—Å—ã–ª–∞–µ—Ç –∫–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫', parse_mode='HTML')    
    elif query.data == 'answer':
        query.edit_message_reply_markup()
        query.message.reply_text(
            text=f'–û—Ç–≤–µ—Ç: <tg-spoiler>–£—Ç—Ä–µ–Ω–Ω–∏–∫–∏</tg-spoiler>', parse_mode='HTML')


def nations_building_quizz(update, context):
    """–í–æ–ø—Ä–æ—Å –ø—Ä–æ –∑–¥–∞–Ω–∏–µ –¢–µ–∞—Ç—Ä–∞ –ù–∞—Ü–∏–π"""
    user_id = update.effective_chat.id
    text = str(update.message.text).lower()
    if text == '–Ω–∞–∑–∞–¥':
        if get_building_score(user_id) == 3.0 and get_history_score(user_id) == 3.0:
            main_menu = main_menu_open
        else: main_menu = main_menu_closed
        update.message.reply_text(text='–í—ã–±–µ—Ä–∏—Ç–µ, –ø—Ä–æ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å!', reply_markup=main_menu)
        return 'NATIONS_MAIN_MENU'
    response = nations_building_question(text)
    if response == 'Bien! –í—ã –æ—á–µ–Ω—å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã':
        increment_building_score(user_id)
        update.message.reply_text(text=response, reply_markup=unit_menu_wo_quizz)
        return 'NATIONS_BUILDING'
    update.message.reply_text(response)


def nations_building_quizz_menu_callback(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π"""
    query = update.callback_query
    query.answer()
    if query.data == 'hint':
        reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data='answer')]])
        query.edit_message_reply_markup(reply_markup=reply_markup)
        query.message.reply_text(
            text='üí° –û–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞', parse_mode='HTML')    
    elif query.data == 'answer':
        query.edit_message_reply_markup()
        query.message.reply_text(
            text=f'–û—Ç–≤–µ—Ç: <tg-spoiler>–§–ª—é–≥–µ—Ä</tg-spoiler>', parse_mode='HTML')


def level_three_end(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å"""
    reply_markup = InlineKeyboardMarkup(quizz_menu)
    if str(update.message.text) == '–í–ø–µ—Ä–µ–¥!':
        update.message.reply_photo(
            photo="https://ie.wampi.ru/2023/06/08/lenkom_transition.png")
        time.sleep(2)
        update.message.reply_text(
            text=f'–î–æ–≥–∞–¥–∞–ª–∏—Å—å, –æ –∫–∞–∫–æ–º —Ç–µ–∞—Ç—Ä–µ —Ä–µ—á—å? ü§î \n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏!',
            reply_markup=reply_markup)
        return "NATIONS_TO_LENKOM_TRANSITION"
    else: update.message.reply_text(text=f'–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª ü•∫')


def nations_to_lenkom(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥–∞–¥–∫–∏ —Å –õ–µ–Ω–∫–æ–º–æ–º"""
    button = ReplyKeyboardMarkup(
        [[KeyboardButton(text='–ù–∞ –º–µ—Å—Ç–µ!', request_location=True)]], resize_keyboard=True, one_time_keyboard=True)    
    text = str(update.message.text).lower()
    response = nations_to_lenkom_question(text)
    if response == 'G√©nial! –ú—ã –Ω–∞–ø—Ä–∞–≤–ª—è–µ–º—Å—è –∫ –õ–µ–Ω–∫–æ–º—É –ú–∞—Ä–∫–∞ –ó–∞—Ö–∞—Ä–æ–≤–∞!':
        update.message.reply_text(response)
        time.sleep(2)
        update.message.reply_text(
            text=lenkom_transition_text,
            reply_markup=button)
        return 'NATIONS_LOCATION'
    update.message.reply_text(response)


def nations_location_quizz_menu_callback(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π –ª–æ–∫–∞—Ü–∏–∏"""
    query = update.callback_query
    query.answer()
    if query.data == 'hint':
        reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data='answer')]])
        query.edit_message_text(
            text=f'–î–æ–≥–∞–¥–∞–ª–∏—Å—å, –æ –∫–∞–∫–æ–º —Ç–µ–∞—Ç—Ä–µ —Ä–µ—á—å? ü§î \n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏!',
            reply_markup=reply_markup)
        query.message.reply_text(
            text=f'üí° –ó–∞–≥–∞–¥–∞–Ω–Ω—ã–π —Ñ–∏–ª—å–º ‚Äî ¬´12 —Å—Ç—É–ª—å–µ–≤¬ª', parse_mode='HTML')    
    elif query.data == 'answer':
        query.edit_message_text(
            text=f'–î–æ–≥–∞–¥–∞–ª–∏—Å—å, –æ –∫–∞–∫–æ–º —Ç–µ–∞—Ç—Ä–µ —Ä–µ—á—å? ü§î \n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏!')
        query.message.reply_text(
            text=f'–û—Ç–≤–µ—Ç: <tg-spoiler>–õ–µ–Ω–∫–æ–º –ú–∞—Ä–∫–∞ –ó–∞—Ö–∞—Ä–æ–≤–∞</tg-spoiler>', parse_mode='HTML')
