import time
import sqlite3

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove
from quizz import electro_building_question, electro_history_question
from location import check_location_electro
from texts.text_five import *
from levels.lvl_one import (get_building_score, get_history_score, 
                            main_menu_closed, main_menu_open, 
                            unit_menu_quizz, unit_menu_wo_quizz,
                            quizz_menu,)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect('scores.db', check_same_thread=False)
c = conn.cursor()

c.execute('''CREATE TABLE IF NOT EXISTS scores
            (user_id INTEGER PRIMARY KEY, history_score FLOAT,
            building_score FLOAT, level FLOAT)''')


def electro_score(user_id):
    if get_building_score(user_id) == 5.0:
        building_score='–ó–∞–≥–∞–¥–∫–∞ –Ω–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏: ‚úÖ'
    else: building_score='–ó–∞–≥–∞–¥–∫–∞ –Ω–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏: ‚ùå'
    if get_history_score(user_id) == 5.0:
        history_score='–ó–∞–≥–∞–¥–∫–∞ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—é: ‚úÖ'
    else: history_score='–ó–∞–≥–∞–¥–∫–∞ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—é: ‚ùå' 
    return f'{history_score} \n{building_score}' 


def electro_transition(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    user_id = update.effective_chat.id
    response = check_location_electro(update, context)
    if response == 'True':
        c.execute("UPDATE scores SET level = level + 1.0 WHERE user_id = ?", (user_id,))
        conn.commit()
        c.execute("SELECT level FROM scores WHERE user_id = ?", (user_id,))
        update.message.reply_text(text=f'{electro_beginning}')
        time.sleep(3)
        update.message.reply_text(
            text='–ü—Ä–æ —á—Ç–æ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –≤–∞–º ‚Äî –∏—Å—Ç–æ—Ä–∏—é –∏–ª–∏ –∑–¥–∞–Ω–∏–µ?', 
            reply_markup=main_menu_closed)
        return 'ELECTRO_MAIN_MENU'
    update.message.reply_text(response)


def electro_main_menu(update, context):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É—Ä–æ–≤–Ω—è"""
    user_id = update.effective_chat.id

    if str(update.message.text) == '–ò—Å—Ç–æ—Ä–∏—è üìú':
        if get_history_score(user_id) < 5.0:
            history_menu = unit_menu_quizz
        else: 
            history_menu = unit_menu_wo_quizz
        update.message.reply_text(text='–£–∑–Ω–∞–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–æ –∏—Å—Ç–æ—Ä–∏—é!', reply_markup=history_menu)
        time.sleep(1)
        update.message.reply_text(
            text=f'{electro_history_text}', 
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(text='–ò—Å—Ç–æ—Ä–∏—è –≠–ª–µ–∫—Ç—Ä–æ—Ç–µ–∞—Ç—Ä–∞', url=electro_history_url)]]),
            )
        return 'ELECTRO_HISTORY'

    elif str(update.message.text) == '–ó–¥–∞–Ω–∏–µ üèõÔ∏è':
        if get_building_score(user_id) < 5.0:
            building_menu = unit_menu_quizz
        else:
            building_menu = unit_menu_wo_quizz
        update.message.reply_text(text='–£–∑–Ω–∞–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–æ –∑–¥–∞–Ω–∏–µ!', reply_markup=building_menu)
        update.message.reply_text(
            text=f'{electro_building_text}', 
            reply_markup= InlineKeyboardMarkup([[InlineKeyboardButton(text='–ó–¥–∞–Ω–∏–µ –≠–ª–µ–∫—Ç—Ä–æ—Ç–µ–∞—Ç—Ä–∞', url=electro_building_url)]]),
            )
        return 'ELECTRO_BUILDING'
      
    elif str(update.message.text) == '–ü–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—å—à–µ üîí' or str(update.message.text) == '–ü–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—å—à–µ üîë':
        forward_menu = ReplyKeyboardMarkup([['–ó–∞–≤–µ—Ä—à–∏—Ç—å —ç–∫—Å–∫—É—Ä—Å–∏—é!']], resize_keyboard=True, one_time_keyboard=True)
        if get_building_score(user_id) < 5.0 or get_history_score(user_id) < 5.0:
            user_score = electro_score(user_id)
            update.message.reply_text(text=f'–í—ã —Ä–µ—à–∏–ª–∏ –Ω–µ –≤—Å–µ –∑–∞–≥–∞–¥–∫–∏! \n\n{user_score}')
        elif get_building_score(user_id) >= 5.0 and get_history_score(user_id) >= 5.0:
            update.message.reply_text(
                text=f'–í—Å–µ —Ö–æ—Ä–æ—à–µ–µ —Ä–∞–Ω–æ –∏–ª–∏ –ø–æ–∑–¥–Ω–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è ‚Äî –∫–∞–∫ –∏ –Ω–∞—à–∞ –ø—Ä–æ–≥—É–ª–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –±—ã–ª–∞' \
                    f' –¥–ª—è –º–µ–Ω—è –ø—Ä–æ—Å—Ç–æ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ–π. –ù–∞–¥–µ—é—Å—å, –∏ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å —ç—Ç–∞ mini-—ç–∫—Å–∫—É—Ä—Å–∏—è.',
                reply_markup=ReplyKeyboardRemove()) 
            time.sleep(2)
            update.message.reply_document(
                document = open('/Users/ilya/Desktop/hsetelegrambot/media/filal.pdf', 'rb'),
                caption=f'Merci –∑–∞ –≤–∞—à–µ —É—á–∞—Å—Ç–∏–µ –∏ –ø–æ–º–æ—â—å ‚Äî —è –±—ã —Ç–æ—á–Ω–æ –Ω–µ —Å–ø—Ä–∞–≤–∏–ª—Å—è —Å–∞–º –∏ –Ω–µ –Ω–∞–ø–∏—Å–∞–ª —Å–≤–æ—é ' \
                    f'—Å—Ç–∞—Ç—å—é! –í –∫–∞—á–µ—Å—Ç–≤–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –ø–æ–¥–µ–ª—é—Å—å –µ—é –∏ —Å –≤–∞–º–∏: —Ç–∞–º –º–Ω–æ–≥–æ —Ç–æ–≥–æ, –æ —á–µ–º —è –Ω–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–ª.',)
            time.sleep(2)
            update.message.reply_text(
                text=f'–¶–µ–Ω–∏—Ç–µ —Ç–µ–∞—Ç—Ä! Bonne chance! –ê —è –æ–±—Ä–∞—Ç–Ω–æ –≤–æ –§—Ä–∞–Ω—Ü–∏—é ‚Äî —Å–¥–∞–≤–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª.',
                reply_markup=forward_menu) 
            return 'LEVEL_FIVE_END'

    else: update.message.reply_text(text=f'–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª ü•∫')


def electro_history(update, context):
    """–ë–ª–æ–∫ –∏—Å—Ç–æ—Ä–∏–∏ –≠–ª–µ–∫—Ç—Ä–æ—Ç–µ–∞—Ç—Ä–∞'"""
    user_id = update.effective_chat.id

    if str(update.message.text) == '–ó–∞–≥–∞–¥–∫–∞' and get_history_score(user_id) < 5.0:
        reply_markup = InlineKeyboardMarkup(quizz_menu)
        update.message.reply_photo(
            photo=open("/Users/ilya/Desktop/hsetelegrambot/media/electro_history.png", "rb"),
            caption = '–ü–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤–Ω–∏–∑—É üëá',
            reply_markup=reply_markup)
        return 'ELECTRO_HISTORY_QUIZZ'
    elif str(update.message.text) == '–ù–∞–∑–∞–¥':
        if get_building_score(user_id) == 5.0 and get_history_score(user_id) == 5.0:
            main_menu = main_menu_open
        else: main_menu = main_menu_closed
        update.message.reply_text(text='–í—ã–±–µ—Ä–∏—Ç–µ, –ø—Ä–æ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å!', reply_markup=main_menu)
        return 'ELECTRO_MAIN_MENU'
    else: update.message.reply_text(text=f'–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª ü•∫')


def electro_building(update, context):
    """–ë–ª–æ–∫ –∑–¥–∞–Ω–∏—è –≠–ª–µ–∫—Ç—Ä–æ—Ç–µ–∞—Ç—Ä–∞"""
    user_id = update.effective_chat.id

    if str(update.message.text) == '–ó–∞–≥–∞–¥–∫–∞' and get_building_score(user_id) < 5.0:
        reply_markup = InlineKeyboardMarkup(quizz_menu)
        update.message.reply_photo(
            photo=open("/Users/ilya/Desktop/hsetelegrambot/media/electro_building.png", "rb"),
            caption = '–ü–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤–Ω–∏–∑—É üëá',
            reply_markup=reply_markup)
        return 'ELECTRO_BUILDING_QUIZZ'
    elif str(update.message.text) == '–ù–∞–∑–∞–¥':
        if get_building_score(user_id) == 5.0 and get_history_score(user_id) == 5.0:
            main_menu = main_menu_open
        else: main_menu = main_menu_closed
        update.message.reply_text(text='–í—ã–±–µ—Ä–∏—Ç–µ, –ø—Ä–æ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å!', reply_markup=main_menu)
        return 'ELECTRO_MAIN_MENU'
    else: update.message.reply_text(text=f'–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª ü•∫')


def electro_history_quizz(update, context):
    """–í–æ–ø—Ä–æ—Å –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –≠–ª–µ–∫—Ç—Ä–æ—Ç–µ–∞—Ç—Ä–∞"""
    user_id = update.effective_chat.id

    text = str(update.message.text).lower()
    if text == '–Ω–∞–∑–∞–¥':
        if get_building_score(user_id) == 5.0 and get_history_score(user_id) == 5.0:
            main_menu = main_menu_open
        else: main_menu = main_menu_closed
        update.message.reply_text(text='–í—ã–±–µ—Ä–∏—Ç–µ, –ø—Ä–æ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å!', reply_markup=main_menu)
        return 'ELECTRO_MAIN_MENU'
    response = electro_history_question(text)
    if response == 'Parfait! –í—ã –∞–±—Å–æ–ª—é—Ç–Ω–æ –ø—Ä–∞–≤—ã üëè':
        c.execute("UPDATE scores SET history_score = history_score + 1.0 WHERE user_id = ?", (user_id,))
        conn.commit()
        c.execute("SELECT history_score FROM scores WHERE user_id = ?", (user_id,))
        update.message.reply_text(text=response, reply_markup=unit_menu_wo_quizz)
        return 'ELECTRO_HISTORY'
    update.message.reply_text(response)


def electro_history_quizz_menu_callback(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π"""
    query = update.callback_query
    query.answer()
    if query.data == 'hint':
        reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data='answer')]])
        query.edit_message_reply_markup(reply_markup=reply_markup)
        query.message.reply_text(
            text='üí° –°—á–∏—Ç–∞–µ—Ç—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –≤ –æ–ø–µ—Ä–Ω–æ–º, –∏ –≤ –¥—Ä–∞–º–∞—Ç–∏—á–µ—Å–∫–æ–º –∫–ª–∞—Å—Å–∞—Ö', parse_mode='HTML')    
    elif query.data == 'answer':
        query.edit_message_reply_markup()
        query.message.reply_text(
            text=f'–û—Ç–≤–µ—Ç: <tg-spoiler>50</tg-spoiler>', parse_mode='HTML')


def electro_building_quizz(update, context):
    """–í–æ–ø—Ä–æ—Å –ø—Ä–æ –∑–¥–∞–Ω–∏–µ –≠–ª–µ–∫—Ç—Ä–æ—Ç–µ–∞—Ç—Ä–∞"""
    user_id = update.effective_chat.id
    text = str(update.message.text).lower()
    if text == '–Ω–∞–∑–∞–¥':
        if get_building_score(user_id) == 5.0 and get_history_score(user_id) == 5.0:
            main_menu = main_menu_open
        else: main_menu = main_menu_closed
        update.message.reply_text(text='–í—ã–±–µ—Ä–∏—Ç–µ, –ø—Ä–æ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å!', reply_markup=main_menu)
        return 'ELECTRO_MAIN_MENU'
    response = electro_building_question(text)
    if response == 'Chic! –ò –ø—Ä–∞–≤–¥–∞ ü§ó':
        c.execute("UPDATE scores SET building_score = building_score + 1.0 WHERE user_id = ?", (user_id,))
        conn.commit()
        c.execute("SELECT building_score FROM scores WHERE user_id = ?", (user_id,))
        update.message.reply_text(response, reply_markup=unit_menu_wo_quizz)
        return 'ELECTRO_BUILDING'
    update.message.reply_text(response)


def electro_building_quizz_menu_callback(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π"""
    query = update.callback_query
    query.answer()
    if query.data == 'hint':
        reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data='answer')]])
        query.edit_message_reply_markup(reply_markup=reply_markup)
        query.message.reply_text(
            text='üí° –ß–µ—Ä–µ–∑ –≥–æ–¥ –ø–æ—Å–ª–µ –û–∫—Ç—è–±—Ä—å—Å–∫–æ–π —Ä–µ–≤–æ–ª—é—Ü–∏–∏', parse_mode='HTML')    
    elif query.data == 'answer':
        query.edit_message_reply_markup()
        query.message.reply_text(
            text=f'–û—Ç–≤–µ—Ç: <tg-spoiler>1918</tg-spoiler>', parse_mode='HTML')


def level_five_end(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å"""
    if str(update.message.text) == '–ó–∞–≤–µ—Ä—à–∏—Ç—å —ç–∫—Å–∫—É—Ä—Å–∏—é!':
        update.message.reply_text(
            text=f'–≠–∫—Å–∫—É—Ä—Å–∏—è –ø–æ —Ç–µ–∞—Ç—Ä–∞–º ‚Äî –≤—Å–µ! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å ‚òÄÔ∏è',
            reply_markup=ReplyKeyboardRemove())
        time.sleep(1)
        update.message.reply_text(
            text=f'–ß—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ \n/feedback –≤ –º–µ–Ω—é –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç —Å–≤–æ–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏. –ú—ã –≤—Å–µ —É—á—Ç–µ–º!',)
        time.sleep(2)
        update.message.reply_text(
            text = f'–ê —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É –≥–æ—Ä–æ–¥—Å–∫–∏—Ö –∫–≤–µ—Å—Ç–æ–≤ –∏ –∞–≤—Ç–æ—Ä–æ–≤ –≤ —Ç–æ–º —á–∏—Å–ª–µ, –º–æ–∂–Ω–æ ' \
            f'<s>–≤—ã–ø–∏—Å–∞—Ç—å —á–µ–∫</s> –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –ª—é–±—É—é —Å—É–º–º—É –ø–æ —Å—Å—ã–ª–∫–µ –≤–Ω–∏–∑—É üëá –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –≤–∫–ª–∞–¥ –≤ –ø—Ä–æ–µ–∫—Ç!',
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(text='–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç', url=donate_url)]]),
            parse_mode='HTML')
        return "LENKOM_TO_LENKOM_TRANSITION"
    else: update.message.reply_text(text=f'–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª ü•∫')
