import time

from telegram import (InlineKeyboardButton, InlineKeyboardMarkup, 
                      ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove)
from quizz import (bolshoi_history_question, bolshoi_building_question, 
                   bolshoi_to_mxat_question)
from files_manager import (get_building_score, get_history_score,
                           get_user_level, increment_level_count,
                           increment_building_score, increment_history_score)
from texts.text_one import *

main_menu_closed = ReplyKeyboardMarkup([['–ò—Å—Ç–æ—Ä–∏—è üìú'], ['–ó–¥–∞–Ω–∏–µ üèõÔ∏è'], ['–ü–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—å—à–µ üîí']], 
                                       resize_keyboard=True)
main_menu_open = ReplyKeyboardMarkup([['–ò—Å—Ç–æ—Ä–∏—è üìú'], ['–ó–¥–∞–Ω–∏–µ üèõÔ∏è'], ['–ü–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—å—à–µ üîë']], 
                                     resize_keyboard=True)


def level_choice_menu(update, context):
    user_id = update.effective_chat.id
    lvl_one_button = '–£—Ä–æ–≤–µ–Ω—å 1 ‚úÖ'
    if get_user_level(user_id) >= 2:
        lvl_two_button = '–£—Ä–æ–≤–µ–Ω—å 2 ‚úÖ'
    else: lvl_two_button = '–£—Ä–æ–≤–µ–Ω—å 2 ‚õîÔ∏è'
    if get_user_level(user_id) >= 3:
        lvl_three_button = '–£—Ä–æ–≤–µ–Ω—å 3 ‚úÖ'
    else: lvl_three_button = '–£—Ä–æ–≤–µ–Ω—å 3 ‚õîÔ∏è'
    if get_user_level(user_id) >= 4:
        lvl_four_button = '–£—Ä–æ–≤–µ–Ω—å 4 ‚úÖ'
    else: lvl_four_button = '–£—Ä–æ–≤–µ–Ω—å 4 ‚õîÔ∏è'
    if get_user_level(user_id) >= 5:
        lvl_five_button = '–£—Ä–æ–≤–µ–Ω—å 5 ‚úÖ'
    else: lvl_five_button = '–£—Ä–æ–≤–µ–Ω—å 5 ‚õîÔ∏è'
    levels_menu = ReplyKeyboardMarkup([
        [f'{lvl_one_button}'], [f'{lvl_two_button}'], [f'{lvl_three_button}'],
        [f'{lvl_four_button}'], [f'{lvl_five_button}']], resize_keyboard=True)
    update.message.reply_text(text='–í—ã–±–µ—Ä–∏—Ç–µ, –Ω–∞ –∫–∞–∫–æ–π —É—Ä–æ–≤–µ–Ω—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–π—Ç–∏!', 
                              reply_markup=levels_menu)
    return 'LEVEL_CHOICE'


def intro(update, context):
    if str(update.message.text) == '–ù–∞—á–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ üé≠':
        button = ReplyKeyboardMarkup([['–î–∞, –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Å—å']], resize_keyboard=True, one_time_keyboard=True)
        update.message.reply_photo(
            photo="https://wampi.ru/image/RXB3FF0",
            caption = 'Bonjour!',
            reply_markup=ReplyKeyboardRemove()) 
        time.sleep(2)
        update.message.reply_text(text=louis_1, reply_markup=button)
        return 'INTRO_2'
    elif str(update.message.text) == '–ü—Ä–æ—á–∏—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ üìù':
        update.message.reply_text(
            text=rules,
            reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton(text='–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—é', url=rules_url)]]))
    else: update.message.reply_text(text=f'–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª ü•∫')
    

def level_choice(update, context):
    user_id = update.effective_chat.id
    if str(update.message.text)[:-2] == '–£—Ä–æ–≤–µ–Ω—å 1':
        if get_user_level(user_id) >= 1.0:
            if get_building_score(user_id) >= 1.0 and get_history_score(user_id) >= 1.0:
                reply_markup = main_menu_open
            else: reply_markup = main_menu_closed
            update.message.reply_text(text='–ü—Ä–æ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å: –∏—Å—Ç–æ—Ä–∏—é —Ç–µ–∞—Ç—Ä–∞ –∏–ª–∏ –∑–¥–∞–Ω–∏–µ?', 
                                      reply_markup=reply_markup)
            return 'BOLSHOI_MAIN_MENU'
        else:
            button = ReplyKeyboardMarkup(
                [['–î–∞, –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Å—å']], resize_keyboard=True, one_time_keyboard=True)
            update.message.reply_photo(
                photo="https://wampi.ru/image/RXB3FF0",
                caption = 'Bonjour!', reply_markup=ReplyKeyboardRemove()) 
            time.sleep(2)
            update.message.reply_text(text=louis_1, reply_markup=button)
            return 'INTRO_2'

    if str(update.message.text)[:-2] == '–£—Ä–æ–≤–µ–Ω—å 2' and get_user_level(user_id) >= 2.0:
        if get_building_score(user_id) >= 2.0 and get_history_score(user_id) >= 2.0:
            reply_markup = main_menu_open
        else: reply_markup = main_menu_closed
        update.message.reply_text(
            text='–ü—Ä–µ–¥–ª–∞–≥–∞—é –Ω–∞—á–∞—Ç—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å —Ç–µ–∞—Ç—Ä–æ–º ‚Äî –≤—ã–±–∏—Ä–∞–π—Ç–µ, –∏—Å—Ç–æ—Ä–∏—è –∏–ª–∏ –∑–¥–∞–Ω–∏–µ?', 
            reply_markup=reply_markup)
        return 'MXAT_MAIN_MENU'

    if str(update.message.text)[:-2] == '–£—Ä–æ–≤–µ–Ω—å 3' and get_user_level(user_id) >= 3.0:
        if get_building_score(user_id) >= 3.0 and get_history_score(user_id) >= 3.0:
            reply_markup = main_menu_open
        else: reply_markup = main_menu_closed
        update.message.reply_text(
            text='C —á–µ–≥–æ –Ω–∞—á–Ω–µ–º –≤ —ç—Ç–æ—Ç —Ä–∞–∑?', 
            reply_markup=reply_markup)
        return 'NATIONS_MAIN_MENU'

    if str(update.message.text)[:-2] == '–£—Ä–æ–≤–µ–Ω—å 4' and get_user_level(user_id) >= 4.0:
        if get_building_score(user_id) >= 4.0 and get_history_score(user_id) >= 4.0:
            reply_markup = main_menu_open
        else: reply_markup = main_menu_closed
        update.message.reply_text(
            text='–ü—Ä–æ —á—Ç–æ —É–∑–Ω–∞–µ–º —Å–ø–µ—Ä–≤–∞?', 
            reply_markup=reply_markup)
        return 'LENKOM_MAIN_MENU'

    if str(update.message.text)[:-2] == '–£—Ä–æ–≤–µ–Ω—å 5' and get_user_level(user_id) >= 5.0:
        if get_building_score(user_id) >= 5.0 and get_history_score(user_id) >= 5.0:
            reply_markup = main_menu_open
        else: reply_markup = main_menu_closed
        update.message.reply_text(
            text='–ü—Ä–æ —á—Ç–æ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –≤–∞–º ‚Äî –∏—Å—Ç–æ—Ä–∏—é –∏–ª–∏ –∑–¥–∞–Ω–∏–µ?', 
            reply_markup=reply_markup)
        return 'ELECTRO_MAIN_MENU'
    else: update.message.reply_text(text='–ü–æ—Ö–æ–∂–µ, —ç—Ç–æ—Ç —É—Ä–æ–≤–µ–Ω—å —Ç–µ–±–µ –µ—â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!')


def intro_two(update, context):
    if str(update.message.text) == '–î–∞, –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Å—å':
        button = ReplyKeyboardMarkup([['–≠—ç—ç‚Ä¶ Oui?']], resize_keyboard=True, one_time_keyboard=True)
        update.message.reply_text(text=louis_2)
        time.sleep(3)
        update.message.reply_text(text=louis_3)
        time.sleep(3)
        update.message.reply_text(text='–ù–µ –º–æ–≥–ª–∏ –±—ã –≤—ã –º–Ω–µ –ø–æ–º–æ—á—å?', reply_markup=button)
        return 'INTRO_3'
    else: update.message.reply_text(text=f'–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª ü•∫')


def intro_three(update, context):
    if str(update.message.text) == '–≠—ç—ç‚Ä¶ Oui?':
        button = ReplyKeyboardMarkup([['–ü–æ —Ä—É–∫–∞–º!']], resize_keyboard=True, one_time_keyboard=True)
        update.message.reply_text(text=louis_4)
        time.sleep(3)
        update.message.reply_text(text=louis_5, reply_markup=button)
        return 'INTRO_4'
    else: update.message.reply_text(text=f'–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª ü•∫')


def intro_four(update, context):
    user_id = update.effective_chat.id
    if get_history_score(user_id) < 1.0:
        history_menu = main_menu_closed
    else: 
        history_menu = main_menu_open
    if str(update.message.text) == '–ü–æ —Ä—É–∫–∞–º!':
        increment_level_count(user_id)
        update.message.reply_text(text=louis_6)
        time.sleep(3)
        update.message.reply_text(text='–ü—Ä–æ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å: –∏—Å—Ç–æ—Ä–∏—é —Ç–µ–∞—Ç—Ä–∞ –∏–ª–∏ –∑–¥–∞–Ω–∏–µ?',
                                  reply_markup=history_menu)
        return 'BOLSHOI_MAIN_MENU'
    else: update.message.reply_text(text=f'–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª ü•∫')


unit_menu_quizz = ReplyKeyboardMarkup([['–ó–∞–≥–∞–¥–∫–∞'], ['–ù–∞–∑–∞–¥']], resize_keyboard=True)
unit_menu_wo_quizz = ReplyKeyboardMarkup([['–ù–∞–∑–∞–¥']], resize_keyboard=True)


def bolshoi_score(user_id):
    if get_building_score(user_id) == 1.0:
        building_score='–ó–∞–≥–∞–¥–∫–∞ –Ω–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏: ‚úÖ'
    else: building_score='–ó–∞–≥–∞–¥–∫–∞ –Ω–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏: ‚ùå'
    if get_history_score(user_id) == 1.0:
        history_score='–ó–∞–≥–∞–¥–∫–∞ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—é: ‚úÖ'
    else: history_score='–ó–∞–≥–∞–¥–∫–∞ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—é: ‚ùå' 
    return f'{history_score} \n{building_score}'  


def bolshoi_main_menu(update, context):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É—Ä–æ–≤–Ω—è"""
    user_id = update.effective_chat.id

    if str(update.message.text) == '–ò—Å—Ç–æ—Ä–∏—è üìú':
        if get_history_score(user_id) < 1.0:
            history_menu = unit_menu_quizz
        else: 
            history_menu = unit_menu_wo_quizz
        update.message.reply_text(text='–£–∑–Ω–∞–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–æ –∏—Å—Ç–æ—Ä–∏—é!', reply_markup=history_menu)
        time.sleep(1)
        update.message.reply_text(
            text=f'{bolshoi_history_text}', 
            reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton(text='–ò—Å—Ç–æ—Ä–∏—è –ë–æ–ª—å—à–æ–≥–æ —Ç–µ–∞—Ç—Ä–∞', url=bolshoi_history_url)]]),
            )
        return 'BOLSHOI_HISTORY'

    elif str(update.message.text) == '–ó–¥–∞–Ω–∏–µ üèõÔ∏è':
        if get_building_score(user_id) < 1.0:
            building_menu = unit_menu_quizz
        else:
            building_menu = unit_menu_wo_quizz
        update.message.reply_text(text='–£–∑–Ω–∞–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–æ –∑–¥–∞–Ω–∏–µ!', reply_markup=building_menu)
        update.message.reply_text(
            text=f'{bolshoi_building_text}', 
            reply_markup= InlineKeyboardMarkup(
            [[InlineKeyboardButton(text='–ó–¥–∞–Ω–∏–µ –ë–æ–ª—å—à–æ–≥–æ —Ç–µ–∞—Ç—Ä–∞', url=bolshoi_building_url)]]),
            )
        return 'BOLSHOI_BUILDING'
      
    elif str(update.message.text) == '–ü–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—å—à–µ üîí' or str(update.message.text) == '–ü–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—å—à–µ üîë':
        forward_menu = ReplyKeyboardMarkup([['–í–ø–µ—Ä–µ–¥!']], resize_keyboard=True, one_time_keyboard=True)
        if get_building_score(user_id) < 1.0 or get_history_score(user_id) < 1.0:
            user_score = bolshoi_score(user_id)
            update.message.reply_text(text=f'–í—ã —Ä–µ—à–∏–ª–∏ –Ω–µ –≤—Å–µ –∑–∞–≥–∞–¥–∫–∏! \n\n{user_score}')
        elif get_building_score(user_id) >= 1.0 and get_history_score(user_id) >= 1.0:
            update.message.reply_text(
                text=f'–ë–æ–ª—å—à–æ–º—É —Ç–µ–∞—Ç—Ä—É ‚Äî –±–æ–ª—å—à–∞—è –∏—Å—Ç–æ—Ä–∏—è. –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ –≤—Ç–æ—Ä–æ–π —É—Ä–æ–≤–µ–Ω—å!' \
                     f' –ò –Ω–∞–º –Ω—É–∂–Ω–æ –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ.', 
                reply_markup=forward_menu)
            return 'LEVEL_ONE_END'

    else: update.message.reply_text(text=f'–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª ü•∫')


quizz_menu = [[
                InlineKeyboardButton("–ü–æ–¥—Å–∫–∞–∑–∫–∞", callback_data='hint'),
                InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data='answer')]]


def bolshoi_history(update, context):
    """–ë–ª–æ–∫ –∏—Å—Ç–æ—Ä–∏–∏ –ë–æ–ª—å—à–æ–≥–æ —Ç–µ–∞—Ç—Ä–∞"""
    user_id = update.effective_chat.id

    if str(update.message.text) == '–ó–∞–≥–∞–¥–∫–∞' and get_history_score(user_id) < 1.0:
        reply_markup = InlineKeyboardMarkup(quizz_menu)
        update.message.reply_photo(
            photo="https://ic.wampi.ru/2023/06/08/bolshoi_history7643e942eeab8632.png",
            caption = '–ü–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤–Ω–∏–∑—É üëá',
            reply_markup=reply_markup)
        return 'BOLSHOI_HISTORY_QUIZZ'
    elif str(update.message.text) == '–ù–∞–∑–∞–¥':
        if get_building_score(user_id) == 1.0 and get_history_score(user_id) == 1.0:
            main_menu = main_menu_open
        else: main_menu = main_menu_closed
        update.message.reply_text(text='–í—ã–±–µ—Ä–∏—Ç–µ, –ø—Ä–æ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å!', reply_markup=main_menu)
        return 'BOLSHOI_MAIN_MENU'
    else: update.message.reply_text(text=f'–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª ü•∫')


def bolshoi_building(update, context):
    """–ë–ª–æ–∫ –∑–¥–∞–Ω–∏—è –ë–æ–ª—å—à–æ–≥–æ —Ç–µ–∞—Ç—Ä–∞"""
    user_id = update.effective_chat.id

    if str(update.message.text) == '–ó–∞–≥–∞–¥–∫–∞' and get_building_score(user_id) < 1.0:
        reply_markup = InlineKeyboardMarkup(quizz_menu)
        update.message.reply_photo(
            photo="https://im.wampi.ru/2023/06/08/bolshoi_building.png",
            caption = '–ü–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤–Ω–∏–∑—É üëá',
            reply_markup=reply_markup)
        return 'BOLSHOI_BUILDING_QUIZZ'
    elif str(update.message.text) == '–ù–∞–∑–∞–¥':
        if get_building_score(user_id) == 1.0 and get_history_score(user_id) == 1.0:
            main_menu = main_menu_open
        else: main_menu = main_menu_closed
        update.message.reply_text(text='–í—ã–±–µ—Ä–∏—Ç–µ, –ø—Ä–æ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å!', reply_markup=main_menu)
        return 'BOLSHOI_MAIN_MENU'
    else: update.message.reply_text(text=f'–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª ü•∫')


def bolshoi_history_quizz(update, context):
    """–í–æ–ø—Ä–æ—Å –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –ë–æ–ª—å—à–æ–≥–æ —Ç–µ–∞—Ç—Ä–∞"""
    user_id = update.effective_chat.id
    text = str(update.message.text).lower()
    if text == '–Ω–∞–∑–∞–¥':
        if get_building_score(user_id) == 1.0 and get_history_score(user_id) == 1.0:
            main_menu = main_menu_open
        else: main_menu = main_menu_closed
        update.message.reply_text(text='–í—ã–±–µ—Ä–∏—Ç–µ, –ø—Ä–æ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å!', reply_markup=main_menu)
        return 'BOLSHOI_MAIN_MENU'
    response = bolshoi_history_question(text)
    if response == 'Merci! –í—Å–µ —Ç–∞–∫ ü•≥':
        increment_history_score(user_id)
        update.message.reply_text(text=response, reply_markup=unit_menu_wo_quizz)
        return 'BOLSHOI_HISTORY'
    update.message.reply_text(response)


def history_quizz_menu_callback(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π"""
    query = update.callback_query
    query.answer()
    if query.data == 'hint':
        reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data='answer')]])
        query.edit_message_reply_markup(reply_markup=reply_markup)
        query.message.reply_text(
            text='üí° –≠—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∞–ª–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–∂–∞—Ä–∞ –≤ 1805 –≥–æ–¥—É', parse_mode='HTML')    
    elif query.data == 'answer':
        query.edit_message_reply_markup()
        query.message.reply_text(
            text=f'–û—Ç–≤–µ—Ç: <tg-spoiler>–ë–æ–ª—å—à–æ–π –ü–µ—Ç—Ä–æ–≤—Å–∫–∏–π —Ç–µ–∞—Ç—Ä</tg-spoiler>', parse_mode='HTML')


def bolshoi_building_quizz(update, context):
    """–í–æ–ø—Ä–æ—Å –ø—Ä–æ –∑–¥–∞–Ω–∏–µ –ë–æ–ª—å—à–æ–≥–æ —Ç–µ–∞—Ç—Ä–∞"""
    user_id = update.effective_chat.id
    text = str(update.message.text).lower()
    if text == '–Ω–∞–∑–∞–¥':
        if get_building_score(user_id) == 1.0 and get_history_score(user_id) == 1.0:
            main_menu = main_menu_open
        else: main_menu = main_menu_closed
        update.message.reply_text(text='–í—ã–±–µ—Ä–∏—Ç–µ, –ø—Ä–æ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å!', reply_markup=main_menu)
        return 'BOLSHOI_MAIN_MENU'
    response = bolshoi_building_question(text)
    if response == 'Bravo! –ò–∑ –≤–∞—Å —Ö–æ—Ä–æ—à–∏–π –º–∞—Ç–µ–º–∞—Ç–∏–∫ ü•≥':
        increment_building_score(user_id)
        update.message.reply_text(response, reply_markup=unit_menu_wo_quizz)
        return 'BOLSHOI_BUILDING'
    update.message.reply_text(response)


def building_quizz_menu_callback(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π"""
    query = update.callback_query
    query.answer()
    if query.data == 'hint':
        reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data='answer')]])
        query.edit_message_reply_markup(reply_markup=reply_markup)
        query.message.reply_text(
            text='üí° –û–±–æ–π–¥–∏—Ç–µ —Ç–µ–∞—Ç—Ä –ø–æ –ø–µ—Ä–∏–º–µ—Ç—Ä—É –∏ –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∑–∞–ø–∞–¥–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É –∑–¥–∞–Ω–∏—è', parse_mode='HTML')    
    elif query.data == 'answer':
        query.edit_message_reply_markup()
        query.message.reply_text(
            text=f'–û—Ç–≤–µ—Ç: <tg-spoiler>22</tg-spoiler>', parse_mode='HTML')


def level_one_end(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å"""
    reply_markup = InlineKeyboardMarkup(quizz_menu)
    if str(update.message.text) == '–í–ø–µ—Ä–µ–¥!':
        update.message.reply_photo(
            photo="https://ie.wampi.ru/2023/06/08/mxat_transition.png")
        time.sleep(2)
        update.message.reply_text(
            text=f'–î–æ–≥–∞–¥–∞–ª–∏—Å—å, –æ –∫–∞–∫–æ–º —Ç–µ–∞—Ç—Ä–µ —Ä–µ—á—å? ü§î \n–ù–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º!',
            reply_markup=reply_markup)
        return "BOLSHOI_TO_MXAT_TRANSITION"
    else: update.message.reply_text(text=f'–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª ü•∫')


def bolshoi_to_mxat(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥–∞–¥–∫–∏ —Å –ú–•–¢"""
    button = ReplyKeyboardMarkup(
        [[KeyboardButton(text='–ù–∞ –º–µ—Å—Ç–µ!', request_location=True)]], resize_keyboard=True, one_time_keyboard=True)    
    text = str(update.message.text).lower()
    response = bolshoi_to_mxat_question(text)
    if response == 'G√©nial! –°–ª–µ–¥—É—é—â–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—à–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ ‚Äî –ú–•–¢ –∏–º. –ß–µ—Ö–æ–≤–∞!':
        update.message.reply_text(response)
        time.sleep(2)
        update.message.reply_text(text=f"{mxat_transition_text}")
        time.sleep(3)
        update.message.reply_text(
            text="–ò–¥—Ç–∏ –¥–æ –ú–•–¢ —Å–æ–≤—Å–µ–º –Ω–∏—á–µ–≥–æ: –¥–∞–π—Ç–µ –∑–Ω–∞—Ç—å, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ —Å—Ç–æ—è—Ç—å –Ω–∞–ø—Ä–æ—Ç–∏–≤ –µ–≥–æ –∑–¥–∞–Ω–∏—è!",
            reply_markup=button)
        return 'BOLSHOI_LOCATION'
    update.message.reply_text(response)


def bolshoi_location_quizz_menu_callback(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π –ª–æ–∫–∞—Ü–∏–∏"""
    query = update.callback_query
    query.answer()
    if query.data == 'hint':
        reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data='answer')]])
        query.edit_message_text(
            text=f'–î–æ–≥–∞–¥–∞–ª–∏—Å—å, –æ –∫–∞–∫–æ–º —Ç–µ–∞—Ç—Ä–µ —Ä–µ—á—å? ü§î \n–ù–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º!',
            reply_markup=reply_markup)
        query.message.reply_text(
            text=f'üí° –°–ª–µ–¥—É—é—â–∏–π —Ç–µ–∞—Ç—Ä –Ω–æ—Å–∏—Ç –∏–º—è —Ä—É—Å—Å–∫–æ–≥–æ –¥—Ä–∞–º–∞—Ç—É—Ä–≥–∞.' \
                 f' –í –æ–¥–Ω–æ–º –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏–π –µ–≥–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π —Ñ–∏–≥—É—Ä–∏—Ä—É–µ—Ç –ø—Ç–∏—Ü–∞,'
                 f' –∫–æ—Ç–æ—Ä–∞—è –≤–ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–∏ —Å—Ç–∞–ª–∞ —Å–∏–º–≤–æ–ª–æ–º —Ç–µ–∞—Ç—Ä–∞.', parse_mode='HTML')    
    elif query.data == 'answer':
        query.edit_message_text(
            text=f'–î–æ–≥–∞–¥–∞–ª–∏—Å—å, –æ –∫–∞–∫–æ–º —Ç–µ–∞—Ç—Ä–µ —Ä–µ—á—å? ü§î \n–ù–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º!')
        query.message.reply_text(
            text=f'–û—Ç–≤–µ—Ç: <tg-spoiler>–ú–•–¢ –∏–º. –ß–µ—Ö–æ–≤–∞</tg-spoiler>', parse_mode='HTML')
