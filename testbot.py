import time

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import Updater, CallbackQueryHandler, CommandHandler, MessageHandler, Filters
from quizz import first_question

from text import bolshoi_history, bolshoi_building, bolshoi_history2, rules

import os

from dotenv import load_dotenv
load_dotenv()

TOKEN = os.getenv('TOKEN')

LEVEL_COUNTER = 0.0

menu3_buttons = [[
                  InlineKeyboardButton("–ü–æ–¥—Å–∫–∞–∑–∫–∞", callback_data='hint'),
                  InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data='answer')]]

# –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
# def start(update, context):
#     """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
#     reply_markup = InlineKeyboardMarkup(menu1_buttons)
#     button = ReplyKeyboardMarkup([['/start']], resize_keyboard=True)
#     update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:', reply_markup=reply_markup)


def wake_up(update, context):
    """–§—É–Ω–∫—Ü–∏—è, –∑–∞–ø—É—Å–∫–∞—é—â–∞—è –±–æ—Ç–∞"""
    chat = update.effective_chat
    name = update.message.chat.first_name
    button = ReplyKeyboardMarkup([['–ü—Ä–∞–≤–∏–ª–∞ üìö'], ['–ù–∞—á–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ üé≠']], resize_keyboard=True)

    context.bot.send_message(
        chat_id=chat.id,
        text='–ü—Ä–∏–≤–µ—Ç, {}. –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ —Ç–µ–∞—Ç—Ä–∞–º! \n–í—ã–±–µ—Ä–∏, –ø—Ä–æ —á—Ç–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ üëá'.format(name),
        reply_markup=button
    )


def message_handler_lvl_one(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    global LEVEL_COUNTER

    if LEVEL_COUNTER < 1.0:
        main_menu = ReplyKeyboardMarkup([['–ò—Å—Ç–æ—Ä–∏—è üìú'], ['–ó–¥–∞–Ω–∏–µ üèõÔ∏è'], ['–î–æ–ø. –ò–Ω—Ñ–∞ ü§´'], ['–ü–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—å—à–µ üîí']], resize_keyboard=True)
    else: 
        main_menu = ReplyKeyboardMarkup([['–ò—Å—Ç–æ—Ä–∏—è üìú'], ['–ó–¥–∞–Ω–∏–µ üèõÔ∏è'], ['–î–æ–ø. –ò–Ω—Ñ–∞ ü§´'], ['–ü–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—å—à–µ üîë']], resize_keyboard=True)

    if str(update.message.text) == '–ü—Ä–∞–≤–∏–ª–∞ üìö':
        update.message.reply_text(text=rules)

    elif str(update.message.text) == '–ù–∞—á–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ üé≠':
        update.message.reply_text(text='–í–ø–µ—Ä–µ–¥!', reply_markup=main_menu)

    elif str(update.message.text) == '–ò—Å—Ç–æ—Ä–∏—è üìú':
        history_menu = ReplyKeyboardMarkup([['–ó–∞–≥–∞–¥–∫–∞'], ['–ù–∞–∑–∞–¥']], resize_keyboard=True)
        update.message.reply_text(text='–£–∑–Ω–∞–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–æ –∏—Å—Ç–æ—Ä–∏—é!', reply_markup=history_menu)
        # update.message.reply_chat_action(action='typing', write_timeout=3.0)
        update.message.reply_text(text=f'{bolshoi_history}')
        time.sleep(3)
        update.message.reply_text(
            text=f'{bolshoi_history2}', 
            reply_markup= InlineKeyboardMarkup([[InlineKeyboardButton(text='–ß–∏—Ç–∞—Ç—å –±–æ–ª—å—à–µ', url="https://bolshoi.ru/")]]),
            parse_mode='HTML')

    elif str(update.message.text) == '–ó–¥–∞–Ω–∏–µ üèõÔ∏è':
        building_menu = ReplyKeyboardMarkup([['–ó–∞–≥–∞–¥–∫–∞'], ['–ù–∞–∑–∞–¥']], resize_keyboard=True)
        update.message.reply_text(text='–£–∑–Ω–∞–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–æ –∑–¥–∞–Ω–∏–µ!', reply_markup=building_menu)
        update.message.reply_text(
            text=f'{bolshoi_building}', 
            reply_markup= InlineKeyboardMarkup([[InlineKeyboardButton(text='–ß–∏—Ç–∞—Ç—å –±–æ–ª—å—à–µ', url="https://bolshoi.ru/")]]),
            parse_mode='HTML')
        update.message.reply_photo(
            photo='https://oknadom.ru/wp-content/uploads/2020/12/p_1.jpg')
    
    elif str(update.message.text) == '–î–æ–ø. –ò–Ω—Ñ–∞ ü§´':
        extra_menu = ReplyKeyboardMarkup([['–ù–∞–∑–∞–¥']], resize_keyboard=True)
        update.message.reply_text(
            text=f'–ó–¥–µ—Å—å –±—É–¥—É—Ç –Ω—É <b>–û–ß–ï–ù–¨</b> –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã, –æ –∫–æ—Ç–æ—Ä—ã—Ö –º–∞–ª–æ –∫—Ç–æ –∑–Ω–∞–µ—Ç',
            parse_mode='HTML',
            reply_markup=extra_menu)
            
    elif str(update.message.text) == '–ù–∞–∑–∞–¥':
        update.message.reply_text(text='–í—ã–±–µ—Ä–∏, –ø—Ä–æ —á—Ç–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å!', reply_markup=main_menu)

    elif str(update.message.text) == '–ó–∞–≥–∞–¥–∫–∞':
        reply_markup = InlineKeyboardMarkup(menu3_buttons)
        update.message.reply_text(
            text=f"–ò—Å—Ç–æ—Ä–∏—é –∫–∞–∫–æ–≥–æ —Ç–µ–∞—Ç—Ä–∞ —Ç—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø—Ä–æ—á–∏—Ç–∞–ª? \n–ü–∏—à–∏ –æ—Ç–≤–µ—Ç –≤–Ω–∏–∑—É üëá",
            reply_markup=reply_markup)
    
    elif str(update.message.text) == '–ü–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—å—à–µ üîí' or str(update.message.text) == '–ü–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—å—à–µ üîë':
        forward_menu = ReplyKeyboardMarkup([['–í–ø–µ—Ä–µ–¥!']], resize_keyboard=True)
        if LEVEL_COUNTER < 1.0:
            update.message.reply_text(text='–¢—ã —Ä–µ—à–∏–ª –Ω–µ –≤—Å–µ –∑–∞–≥–∞–¥–∫–∏!')
        elif LEVEL_COUNTER == 1.0:
            update.message.reply_text(text='–û—Ç–ª–∏—á–Ω–æ! –ò–¥–µ–º –¥–∞–ª—å—à–µ', reply_markup=forward_menu)
            return LEVEL_COUNTER

    elif str(update.message.text) == '–í–ø–µ—Ä–µ–¥!':
        update.message.reply_text(text=f'–ú–æ–ª–æ–¥–µ—Ü, —Ç—ã –ø–µ—Ä–µ—à–µ–ª –Ω–∞ –≤—Ç–æ—Ä–æ–π —É—Ä–æ–≤–µ–Ω—å! \n\n–û—Ç–ø—Ä–∞–≤–ª—è–π—Å—è —Å—é–¥–∞ üëá')
        update.message.reply_location(latitude=55.760073, longitude=37.613144)

    elif str(update.message.text) == 'LEVEL_COUNTER': 
        update.message.reply_text(text=LEVEL_COUNTER, reply_markup=main_menu)  


    else: 
        text = str(update.message.text).lower()
        response = first_question(text)
        if response == '–ú–æ–ª–æ–¥–µ—Ü! –≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç üèÖ':
            LEVEL_COUNTER += 0.5
            # print(LEVEL_COUNTER)
        update.message.reply_text(response)


def message_handler_lvl_two(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    main_menu = ReplyKeyboardMarkup([['üìú –ò—Å—Ç–æ—Ä–∏—è'], ['üèõÔ∏è –ó–¥–∞–Ω–∏–µ'], ['ü§´ –î–æ–ø. –ò–Ω—Ñ–∞']], resize_keyboard=True)
    if str(update.message.text) == '–í–ø–µ—Ä–µ–¥!':
        update.message.reply_text(text='–ú–æ–ª–æ–¥–µ—Ü, —Ç—ã –ø–µ—Ä–µ—à–µ–ª –Ω–∞ –≤—Ç–æ—Ä–æ–π —É—Ä–æ–≤–µ–Ω—å!', reply_markup=main_menu)

    elif str(update.message.text) == 'LEVEL_COUNTER': 
        update.message.reply_text(text=LEVEL_COUNTER)  

    elif str(update.message.text) == 'üìú –ò—Å—Ç–æ—Ä–∏—è':
        history_menu = ReplyKeyboardMarkup([['–ó–∞–≥–∞–¥–∫–∞'], ['–ù–∞–∑–∞–¥']], resize_keyboard=True)
        # menu2_markup = InlineKeyboardMarkup(menu2_buttons)
        update.message.reply_text(text='–£–∑–Ω–∞–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–æ –∏—Å—Ç–æ—Ä–∏—é!')
        update.message.reply_text(text=f'{bolshoi_history}')
        time.sleep(3)
        update.message.reply_text(
            text=f'{bolshoi_history2} \n<a href="https://bolshoi.ru/">–ß–∏—Ç–∞—Ç—å –±–æ–ª—å—à–µ</a>', 
            reply_markup=history_menu, parse_mode='HTML')

    elif str(update.message.text) == 'üèõÔ∏è –ó–¥–∞–Ω–∏–µ':
        # menu2_markup = InlineKeyboardMarkup(menu2_buttons)
        building_menu = ReplyKeyboardMarkup([['–ó–∞–≥–∞–¥–∫–∞'], ['–ù–∞–∑–∞–¥']], resize_keyboard=True)
        update.message.reply_text(text='–£–∑–Ω–∞–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–æ –∑–¥–∞–Ω–∏–µ!')
        update.message.reply_text(
            text=f'{bolshoi_building}', parse_mode='HTML')
        update.message.reply_photo(
            photo='https://oknadom.ru/wp-content/uploads/2020/12/p_1.jpg',
            reply_markup=building_menu)
    
    elif str(update.message.text) == 'ü§´ –î–æ–ø. –ò–Ω—Ñ–∞':
        extra_menu = ReplyKeyboardMarkup([['–ù–∞–∑–∞–¥']], resize_keyboard=True)
        update.message.reply_text(
            text=f'–ó–¥–µ—Å—å –±—É–¥—É—Ç –Ω—É <b>–û–ß–ï–ù–¨</b> –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã, –æ –∫–æ—Ç–æ—Ä—ã—Ö –º–∞–ª–æ –∫—Ç–æ –∑–Ω–∞–µ—Ç',
            parse_mode='HTML',
            reply_markup=extra_menu)
            
        update.message.reply_video_note(video_note="DQACAgIAAxkBAAEeoVpkGbZVCjkSphnyyGHM9Jy4oWggXgAC4SkAArTu0EhSPBhw-4Wxgi8E")

    elif str(update.message.text) == '–ù–∞–∑–∞–¥':
        update.message.reply_text(text='–í—ã–±–µ—Ä–∏, –ø—Ä–æ —á—Ç–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å!', reply_markup=main_menu)

    elif str(update.message.text) == '–ó–∞–≥–∞–¥–∫–∞':
        reply_markup = InlineKeyboardMarkup(menu3_buttons)
        update.message.reply_text(
            text=f"–ò—Å—Ç–æ—Ä–∏—é –∫–∞–∫–æ–≥–æ —Ç–µ–∞—Ç—Ä–∞ —Ç—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø—Ä–æ—á–∏—Ç–∞–ª? \n–ü–∏—à–∏ –æ—Ç–≤–µ—Ç –≤–Ω–∏–∑—É üëá",
            reply_markup=reply_markup)

    else: 
        text = str(update.message.text).lower()
        response = first_question(text)
        update.message.reply_text(response)


def menu3_callback(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–µ–Ω—é –¥–ª—è –∑–∞–≥–∞–¥–∫–∏"""
    query = update.callback_query
    query.answer()
    if query.data == 'hint':
        reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data='answer')]])
        query.edit_message_text(
            text=f"–ò—Å—Ç–æ—Ä–∏—é –∫–∞–∫–æ–≥–æ —Ç–µ–∞—Ç—Ä–∞ —Ç—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø—Ä–æ—á–∏—Ç–∞–ª? \n–ü–∏—à–∏ –æ—Ç–≤–µ—Ç –≤–Ω–∏–∑—É üëá",
            reply_markup=reply_markup)
        query.message.reply_text(
            text='–ü–æ–¥—Å–∫–∞–∑–∫–∞', parse_mode='HTML')    
    elif query.data == 'answer':
        query.edit_message_text(
            text=f"–ò—Å—Ç–æ—Ä–∏—é –∫–∞–∫–æ–≥–æ —Ç–µ–∞—Ç—Ä–∞ —Ç—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø—Ä–æ—á–∏—Ç–∞–ª? \n–ü–∏—à–∏ –æ—Ç–≤–µ—Ç –≤–Ω–∏–∑—É üëá")
        query.message.reply_text(
            text=f'<tg-spoiler>–æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–≥–∞–¥–∫—É</tg-spoiler>', parse_mode='HTML')      


def main():
    """–°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞"""
    global LEVEL_COUNTER
    updater = Updater(TOKEN, use_context=True)

    updater.dispatcher.add_handler(CommandHandler('start', wake_up))
    updater.dispatcher.add_handler(CallbackQueryHandler(menu3_callback, pattern='^(hint|answer)$'))

    # if LEVEL_COUNTER < 1.0:
    updater.dispatcher.add_handler(MessageHandler(Filters.text, message_handler_lvl_one))
    if (LEVEL_COUNTER >= 1.0) and (LEVEL_COUNTER < 2.0):
        updater.dispatcher.remove_handler(message_handler_lvl_one)
    updater.dispatcher.add_handler(MessageHandler(Filters.text, message_handler_lvl_two))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
